{"version":3,"sources":["Test/Test.js","PixiViz/PixiViz.js","Utilities/Utilities.js","App.js","serviceWorker.js","index.js"],"names":["projection","pixiApp","viewport","container","Utilities","size","minScale","maxScale","categories","emoji_dictionary","simulation","d3","stop","Test","props","state","data","componentNode","this","_rootNode","then","csv","byDates","key","d","entries","raw_data","length","values","console","log","fitSize","window","innerWidth","innerHeight","translate","scale","center","forEach","r","point","long","lat","x","y","i","c","ii","obj","denominazione_regione","find","dd","push","setState","svg","g","append","call","extent","scaleExtent","on","attr","transform","nodes","selectAll","enter","emoji","text","category","alphaDecay","prompt","document","title","alpha","toFixed","force","confirm","index","vx","vy","blob","Blob","JSON","stringify","type","FileSaver","saveAs","restart","ref","_setRef","bind","style","width","height","Component","dpr","devicePixelRatio","PixiViz","loadData","textures","icons","querySelectorAll","html2canvas","backgroundColor","canvas","id","toDataURL","Object","keys","PIXI","resolution","autoResize","appendChild","view","Viewport","passiveWheel","stopPropagation","divWheel","screenWidth","screenHeight","worldWidth","worldHeight","interaction","renderer","plugins","clampZoom","clampZoomOptions","drag","pressDrag","clampWheel","pinch","wheel","stage","addChild","sprite","from","anchor","set","fontSize","position","top","map","App","className","basename","path","exact","to","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mHA2BIA,ECnBAC,EAASC,EAAUC,E,4HCRjBC,EAAY,CAElBA,MAAkB,CACdC,KAAM,IAGVD,iBAA6B,CACzBE,SAAS,GACTC,SAAS,IAGbH,iBAA6B,CACzB,uBAA0B,eAC1B,kBAAqB,eACrB,uBAA0B,eAC1B,gBAAmB,eACnB,SAAY,iBAGDA,IFZTI,EAAa,CACjB,yBACA,oBAEA,yBAGA,kBACA,YAIIC,EAAmB,CACvB,uBAA0B,eAC1B,kBAAqB,eACrB,uBAA0B,eAC1B,gBAAmB,eACnB,SAAY,gBAKRC,EAAaC,MACdC,OAuHUC,E,YApHb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAHQ,E,qEAMVC,GACNC,KAAKC,UAAYF,I,0CAEE,IAAD,OAClBN,IArCa,sGAqCIS,MAAK,SAAAC,GAKpB,IAAMC,EAAUX,MACbY,KAAI,SAAAC,GAAC,OAAEA,EAAER,QACTS,QAAQJ,GAELK,EAAWJ,EAAQA,EAAQK,OAAO,GAAGC,OAC3CC,QAAQC,IAAIJ,GACZ,IAAMV,EAAO,GAEbhB,EAAaW,MACVoB,QAAQ,CAACC,OAAOC,WAAY,IAAKD,OAAOE,YAAY,KAAM,EAAKf,WAC/DgB,UAAU,CAACH,OAAOC,WAAa,EAAGD,OAAOE,YAAc,IACvDE,MAAM,KACNC,OAAO,CAAC,mBAAoB,aAE/BX,EAASY,SAAQ,SAAAC,GACf,IAAMC,EAAQxC,EAAW,CAACuC,EAAEE,KAAKF,EAAEG,MACnCH,EAAEI,EAAIH,EAAM,GACZD,EAAEK,EAAIJ,EAAM,MAGd,IAzByB,eAyBjBK,GACNrC,EAAW8B,SAAQ,SAAAQ,GACjB,IAAK,IAAIC,EAAG,EAAGA,EAAGrB,EAASmB,GAAGC,KAAMC,EAAG,CACrC,IAAMC,EAAI,CACR,SAAYF,EACZ,sBAAyBpB,EAASmB,GAAGI,sBACrC,KAAQvB,EAASmB,GAAG7B,KACpB,EAAKU,EAASwB,MAAK,SAAAC,GAAE,OAAEA,EAAGF,wBAAwBvB,EAASmB,GAAGI,yBAAuBN,EACrF,EAAKjB,EAASwB,MAAK,SAAAC,GAAE,OAAEA,EAAGF,wBAAwBvB,EAASmB,GAAGI,yBAAuBL,GAEvF5B,EAAKoC,KAAKJ,QAVRH,EAAE,EAAGA,EAAEnB,EAASC,SAAUkB,EAAI,EAA9BA,GAcR,EAAKQ,SAAS,CAAC3B,SAASA,EAAUV,KAAKA,IAAO,WAE5C,IAAMsC,EAAM3C,IAAU,EAAKQ,WACrBoC,EAAID,EAAIE,OAAO,KAErBF,EAAIG,KAAK9C,MACN+C,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC1B,OAAOC,WAAYD,OAAOE,eAC3CyB,YAAY,CAAC,EAAG,KAChBC,GAAG,QAEN,WACEL,EAAEM,KAAK,YAAalD,IAASmD,eAG/B,IAAIC,EAAQR,EAAES,UAAU,QAAQhD,KAAK,EAAKD,MAAMC,MAAMiD,QAAQT,OAAO,QAClEK,KAAK,YAAYzD,EAAU8D,MAAM7D,KAAK,MACtC8D,MAAK,SAAA3C,GAAC,OAAEf,EAAiBe,EAAE4C,aAExBC,EAAarC,OAAOsC,OAAO,0CAA2C,MAE5E5D,EAAWqD,MAAM/C,GACd4C,GAAG,QAAQ,WAEVW,SAASC,MAAQ9D,EAAW+D,QAAQC,QAAQ,MAK7CC,MAAM,IAAKhE,KAAU,SAAAa,GAAC,OAAEA,EAAEmB,MAC1BgC,MAAM,IAAKhE,KAAU,SAAAa,GAAC,OAAEA,EAAEoB,MAC1B+B,MAAM,YAAahE,IAAgB,MACnC0D,WAAWA,GACXI,MAAM,GACNb,GAAG,OAAO,WAMT,GALAG,EACGF,KAAK,KAAI,SAAArC,GAAC,OAAEA,EAAEmB,KACdkB,KAAK,KAAI,SAAArC,GAAC,OAAEA,EAAEoB,KACjBf,QAAQC,IAAI,QAAQd,GAEhBgB,OAAO4C,QAAQ,2FAA0C,CAC3D,IAAK,IAAI/B,EAAE,EAAGA,EAAE7B,EAAKW,SAAUkB,SACtB7B,EAAK6B,GAAGgC,aACR7D,EAAK6B,GAAGiC,UACR9D,EAAK6B,GAAGkC,GAEjB,IAAIC,EAAO,IAAIC,KAAK,CAACC,KAAKC,UAAUnE,IAAQ,CAACoE,KAAM,mCACnDC,IAAUC,OAAON,EAAM,mBAI1BO,kB,+BAaP,OADA1D,QAAQC,IAAIZ,KAAKH,MAAMC,MAChB,yBAAKwE,IAAKtE,KAAKuE,QAAQC,KAAKxE,MAAOyE,MAAO,CAAEC,MAAM,OAAQC,OAAO,c,GAjHzDC,a,wCCxBeF,EAAQ5D,OAAOC,WAAY4D,EAAS7D,OAAOE,YAAa6D,EAAM/D,OAAOgE,kBAAoB,EAsG5GC,E,YAnGb,WAAYnF,GAAQ,IAAD,8BACjB,4CAAMA,KACDoF,SAAW,EAAKA,SAASR,KAAd,gBAEhB,EAAK3E,MAAQ,CACXoF,SAAU,IALK,E,wEAUjB,OAAOxF,IAAQ,wB,0CA6Df,IA1DmB,IAAD,OAwDZyF,EAAQ7B,SAAS8B,iBAAiB,6BAClCF,EAAW,GAzDC,WA0DTtD,GACPyD,IAAYF,EAAMvD,GAAG,CAAC0D,gBAAgB,OAAOnF,MAAK,SAACoF,GACjDL,EAASC,EAAMvD,GAAG4D,IAAMD,EAAOE,UAAU,aACrCC,OAAOC,KAAKT,GAAUxE,SAAWgF,OAAOC,KAAKxG,EAAUK,kBAAkBkB,QAC3E,EAAK0B,SAAS,CAAC8C,SAASA,IAAU,WA5DtCtE,QAAQC,IAAI,EAAKf,OACjBd,EAAU,IAAI4G,cAAiB,CAC7BjB,MAAOA,EACPC,OAAQA,EACRU,gBAAiB,SACjBO,WAAYf,EACZgB,YAAY,IAEd,EAAK5F,UAAU6F,YAAY/G,EAAQgH,OAGnC/G,EAAW,IAAIgH,IAAS,CACtB7E,OAAQ,IAAIwE,SAAY7E,OAAOC,WAAW,GAAID,OAAOE,YAAY,GACjEiF,cAAc,EACdC,iBAAiB,EACjBC,SAAU,EAAKlG,UACfmG,YAAatF,OAAOC,WACpBsF,aAAcvF,OAAOE,YACrBsF,WAAYxF,OAAOC,WACnBwF,YAAazF,OAAOE,YACpBwF,YAAazH,EAAQ0H,SAASC,QAAQF,eAIrCG,UAAUzH,EAAU0H,kBACpBC,KAAK,CAACC,WAAU,EAAMC,YAAW,IACjCC,QACAC,QACHlI,EAAQmI,MAAMC,SAASnI,GAEvBC,EAAY,IAAI0G,YAChB3G,EAASmI,SAASlI,GAElB,EAAK+F,WAAW9E,MAAM,SAAAJ,GAEpB,IAAK,IAAI6B,EAAE,EAAGA,EAAE7B,EAAKW,SAAUkB,EAAG,CAGhC,IAAMyF,EAASzB,SAAY0B,KAAK,EAAKxH,MAAMoF,SAASnF,EAAK6B,GAAGuB,WAG5DkE,EAAOE,OAAOC,IAAI,IAGlBH,EAAO3F,EAAI3B,EAAK6B,GAAGF,EACnB2F,EAAO1F,EAAI5B,EAAK6B,GAAGD,EACnB0F,EAAOlG,MAAMO,EAAI,IACjB2F,EAAOlG,MAAMQ,EAAI,IAEjBzC,EAAUkI,SAASC,cAOhBzF,EAAE,EAAGA,EAAEuD,EAAMzE,SAAUkB,EAAI,EAA3BA,K,8BAYH5B,GACNC,KAAKC,UAAYF,I,+BAGjB,OAAO,yBAAK0E,MAAO,CAACC,MAAM,OAAOC,OAAO,QAASL,IAAKtE,KAAKuE,QAAQC,KAAKxE,OAC3B,IAA1CyF,OAAOC,KAAK1F,KAAKH,MAAMoF,UAAUxE,QAChC,yBAAK8E,GAAG,sBAAsBd,MAAO,CAAC+C,SAAStI,EAAU8D,MAAM7D,KAAK,KAAKsI,SAAS,WAAYC,IAAI,WAC9FjC,OAAOC,KAAKxG,EAAUK,kBAAkBoI,KAAI,SAAArH,GAC5C,OAAO,0BAAMiF,GAAIjF,EAAGD,IAAG,gBAAWC,IAAMpB,EAAUK,iBAAiBe,a,GA5FzDsE,aE0BPgD,MA7Bf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KAEd,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAME,GAAG,QAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,yBCbEC,QACW,cAA7BpH,OAAOqH,SAASC,UAEe,UAA7BtH,OAAOqH,SAASC,UAEhBtH,OAAOqH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlF,SAASmF,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzI,MAAK,SAAA0I,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpI,QAAQoI,MAAMA,EAAMC,a","file":"static/js/main.ea1b21ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport FileSaver from 'file-saver';\n\nimport Utilities from '../Utilities/Utilities';\n\nconst data_url = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv';\nconst categories = [\n  \"ricoverati_con_sintomi\",\n  \"terapia_intensiva\",\n  // \"totale_ospedalizzati\",\n  \"isolamento_domiciliare\",\n  // \"totale_attualmente_positivi\",\n  // \"nuovi_attualmente_positivi\",\n  \"dimessi_guariti\",\n  \"deceduti\",\n  // \"tamponi\"\n]\n\nconst emoji_dictionary = {\n  \"ricoverati_con_sintomi\": '🌺',\n  \"terapia_intensiva\": '💐',\n  \"isolamento_domiciliare\": '🍀',\n  \"dimessi_guariti\": '🌼',\n  \"deceduti\": '🌸'\n};\n\nlet projection;\n\nconst simulation = d3.forceSimulation()\n    .stop();\n\nclass Test extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: []\n    }\n  }\n  _setRef(componentNode) {\n    this._rootNode = componentNode;\n  }\n  componentDidMount() {\n    d3.csv(data_url).then(csv=>{\n\n      // csv = csv.filter(d=>d.denominazione_regione==='Sicilia'||d.denominazione_regione===\"Valle d'Aosta\"||d.denominazione_regione===\"Lazio\")\n      // csv = csv.filter(d=>d.denominazione_regione==='Lombardia')\n\n      const byDates = d3.nest()\n        .key(d=>d.data)\n        .entries(csv);\n      \n      const raw_data = byDates[byDates.length-1].values;\n      console.log(raw_data);\n      const data = [];\n\n      projection = d3.geoConicEqualArea()\n        .fitSize([window.innerWidth -200, window.innerHeight-200], this._rootNode)\n        .translate([window.innerWidth / 2, window.innerHeight / 2])\n        .scale(3000)\n        .center([12.368775000000001, 42.9451139]);\n\n      raw_data.forEach(r=>{\n        const point = projection([r.long,r.lat]);\n        r.x = point[0];\n        r.y = point[1];\n      })\n\n      for(let i=0; i<raw_data.length; ++i) {\n        categories.forEach(c=>{\n          for (let ii=0; ii<raw_data[i][c]; ++ii){\n            const obj={\n              'category': c,\n              'denominazione_regione': raw_data[i].denominazione_regione,\n              'date': raw_data[i].data,\n              'x': raw_data.find(dd=>dd.denominazione_regione===raw_data[i].denominazione_regione).x,\n              'y': raw_data.find(dd=>dd.denominazione_regione===raw_data[i].denominazione_regione).y\n            }\n            data.push(obj);\n          }\n        })\n      }\n      this.setState({raw_data:raw_data, data:data}, ()=>{\n\n        const svg = d3.select(this._rootNode);\n        const g = svg.append('g');\n          \n        svg.call(d3.zoom()\n          .extent([[0, 0], [window.innerWidth, window.innerHeight]])\n          .scaleExtent([1, 20])\n          .on(\"zoom\", zoomed));\n\n        function zoomed() {\n          g.attr(\"transform\", d3.event.transform);\n        }\n\n        let nodes = g.selectAll('text').data(this.state.data).enter().append('text')\n          .attr('font-size',Utilities.emoji.size+'px')\n          .text(d=>emoji_dictionary[d.category]);\n\n        const alphaDecay = window.prompt('Set the alpha decay of force simulation', 0.005);\n\n        simulation.nodes(data)\n          .on('tick', ()=>{\n            // console.log(simulation.alpha());\n            document.title = simulation.alpha().toFixed(4);\n            // nodes\n            //   .attr('x',d=>d.x)\n            //   .attr('y',d=>d.y);\n          })\n          .force(\"x\", d3.forceX(d=>d.x))\n          .force(\"y\", d3.forceY(d=>d.y))\n          .force(\"collision\", d3.forceCollide(0.35))\n          .alphaDecay(alphaDecay)\n          .alpha(1)\n          .on(\"end\", () => {\n            nodes\n              .attr('x',d=>d.x)\n              .attr('y',d=>d.y);\n            console.log('ended',data);\n\n            if (window.confirm(\"🌺🌿☘️🌼🌸 download spatialized data?\")) {\n              for (let i=0; i<data.length; ++i){\n                delete data[i].index;\n                delete data[i].vx;\n                delete data[i].vy;\n              }\n              var blob = new Blob([JSON.stringify(data)], {type: \"application/json;charset=utf-8\"});\n              FileSaver.saveAs(blob, \"covi-z.json\");\n            }\n\n          })\n          .restart();\n\n        // spatialization()\n        // function spatialization() {\n        //   if (simulation.alpha() > 0.1) {\n        //     requestAnimationFrame(spatialization())\n        //   }\n        // }\n      })\n    })\n  }\n  render() {\n    console.log(this.state.data);\n    return <svg ref={this._setRef.bind(this)} style={{ width:'100%', height:'100%'}}></svg>;\n  }\n}\n\nexport default Test;\n","import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport * as PIXI from \"pixi.js\";\nimport { Viewport } from \"pixi-viewport\";\nimport html2canvas from 'html2canvas';\n\nimport Utilities from '../Utilities/Utilities';\n\nlet pixiApp, viewport, container, width = window.innerWidth, height = window.innerHeight, dpr = window.devicePixelRatio || 1;\n\nclass PixiViz extends Component {\n  constructor(props) {\n    super(props);\n    this.loadData = this.loadData.bind(this);\n\n    this.state = {\n      textures: {}\n    }\n  }\n\n  loadData(){\n    return d3.json('./data/covi-z.json')\n  }\n\n  componentDidMount() {\n    const initPixiApp = () => {\n      console.log(this.state)\n      pixiApp = new PIXI.Application({\n        width: width,\n        height: height,\n        backgroundColor: 0xfafafa,\n        resolution: dpr,\n        autoResize: true\n      });\n      this._rootNode.appendChild(pixiApp.view);\n  \n      // create viewport and add it to the stage\n      viewport = new Viewport({\n        center: new PIXI.Point(-window.innerWidth/2, -window.innerHeight/2),\n        passiveWheel: false,\n        stopPropagation: true,\n        divWheel: this._rootNode,\n        screenWidth: window.innerWidth,\n        screenHeight: window.innerHeight,\n        worldWidth: window.innerWidth,\n        worldHeight: window.innerHeight,\n        interaction: pixiApp.renderer.plugins.interaction // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n      });\n      viewport\n        // .moveCenter(window.innerWidth/2,window.innerHeight/2)\n        .clampZoom(Utilities.clampZoomOptions)\n        .drag({pressDrag:true, clampWheel:true})\n        .pinch()\n        .wheel()\n      pixiApp.stage.addChild(viewport);\n  \n      container = new PIXI.Container();\n      viewport.addChild(container);\n  \n      this.loadData().then( data =>{\n\n        for (let i=0; i<data.length; ++i) {\n\n          // create a new Sprite from an image path\n          const sprite = PIXI.Sprite.from(this.state.textures[data[i].category]);\n\n          // center the sprite's anchor point\n          sprite.anchor.set(0.5);\n\n          // move the sprite to the center of the screen\n          sprite.x = data[i].x;\n          sprite.y = data[i].y;\n          sprite.scale.x = 0.05;\n          sprite.scale.y = 0.05;\n\n          container.addChild(sprite);\n        }\n      });\n    }\n\n    const icons = document.querySelectorAll('#textures-generation>span');\n    const textures = {};\n    for (let i=0; i<icons.length; ++i) {\n      html2canvas(icons[i],{backgroundColor:null}).then((canvas)=>{\n        textures[icons[i].id] = canvas.toDataURL(\"image/png\");\n        if (Object.keys(textures).length === Object.keys(Utilities.emoji_dictionary).length) {\n          this.setState({textures:textures},()=>{\n            initPixiApp();\n          })\n        }\n      });\n    }\n\n  }\n  _setRef(componentNode) {\n    this._rootNode = componentNode;\n  }\n  render() {\n    return <div style={{width:'100%',height:'100%'}} ref={this._setRef.bind(this)}>\n      {Object.keys(this.state.textures).length===0 && \n        <div id=\"textures-generation\" style={{fontSize:Utilities.emoji.size+'px',position:'absolute', top:'-100px'}}>\n          { Object.keys(Utilities.emoji_dictionary).map(d=>{\n            return <span id={d} key={`emoji-${d}`}>{Utilities.emoji_dictionary[d]}</span>\n          }) }\n        </div>\n      }\n    </div>;\n  }\n}\n\nexport default PixiViz;\n","const Utilities = {}\n\nUtilities.emoji = {\n    size: 10\n}\n\nUtilities.clampZoomOptions = {\n    minScale:0.5,\n    maxScale:10\n}\n\nUtilities.emoji_dictionary = {\n    \"ricoverati_con_sintomi\": '🌺',\n    \"terapia_intensiva\": '💐',\n    \"isolamento_domiciliare\": '🍀',\n    \"dimessi_guariti\": '🌼',\n    \"deceduti\": '🌸'\n};\n\nexport default Utilities;\n","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\nimport Test from './Test';\nimport PixiViz from './PixiViz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Route path=\"/svg\">\n          <Test />\n        </Route>\n        <Route path=\"/pixi\">\n          <PixiViz />\n        </Route>\n        <Route exact path=\"/\">\n          {\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/svg\">SVG Version</Link>\n                </li>\n                <li>\n                  <Link to=\"/pixi\">PIXIjs version</Link>\n                </li>\n              </ul>\n            </nav>\n          }\n        </Route>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}