{"version":3,"sources":["Test/Test.js","App.js","serviceWorker.js","index.js"],"names":["projection","categories","emoji_dictionary","simulation","d3","stop","Test","props","state","data","componentNode","this","_rootNode","then","csv","byDates","key","d","entries","raw_data","length","values","console","log","fitSize","window","innerWidth","innerHeight","translate","scale","center","forEach","r","point","long","lat","x","y","i","c","ii","obj","denominazione_regione","find","dd","push","setState","svg","g","append","call","extent","scaleExtent","on","attr","transform","nodes","selectAll","enter","text","category","document","title","alpha","toFixed","force","alphaDecay","confirm","blob","Blob","JSON","stringify","type","FileSaver","saveAs","restart","ref","_setRef","bind","style","width","height","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25304157.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport FileSaver from 'file-saver';\n\nconst data_url = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv';\nconst categories = [\n  \"ricoverati_con_sintomi\",\n  \"terapia_intensiva\",\n  // \"totale_ospedalizzati\",\n  \"isolamento_domiciliare\",\n  // \"totale_attualmente_positivi\",\n  // \"nuovi_attualmente_positivi\",\n  \"dimessi_guariti\",\n  \"deceduti\",\n  // \"tamponi\"\n]\n\nconst emoji_dictionary = {\n  \"ricoverati_con_sintomi\": '🌺',\n  \"terapia_intensiva\": '💐',\n  \"isolamento_domiciliare\": '🍀',\n  \"dimessi_guariti\": '🌼',\n  \"deceduti\": '🌸'\n};\n\nlet projection;\n\nconst simulation = d3.forceSimulation()\n    .stop();\n\nclass Test extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: []\n    }\n  }\n  _setRef(componentNode) {\n    this._rootNode = componentNode;\n  }\n  componentDidMount() {\n    d3.csv(data_url).then(csv=>{\n\n      // csv = csv.filter(d=>d.denominazione_regione==='Sicilia'||d.denominazione_regione===\"Valle d'Aosta\"||d.denominazione_regione===\"Lazio\")\n\n      const byDates = d3.nest()\n        .key(d=>d.data)\n        .entries(csv);\n      \n      const raw_data = byDates[byDates.length-1].values;\n      console.log(raw_data);\n      const data = [];\n\n      projection = d3.geoConicEqualArea()\n        .fitSize([window.innerWidth -200, window.innerHeight-200], this._rootNode)\n        .translate([window.innerWidth / 2, window.innerHeight / 2])\n        .scale(3000)\n        .center([12.368775000000001, 42.9451139]);\n\n      raw_data.forEach(r=>{\n        const point = projection([r.long,r.lat]);\n        r.x = point[0];\n        r.y = point[1];\n      })\n\n      for(var i=0; i<raw_data.length; ++i) {\n        categories.forEach(c=>{\n          for (var ii=0; ii<raw_data[i][c]; ++ii){\n            const obj={\n              'category': c,\n              'denominazione_regione': raw_data[i].denominazione_regione,\n              'date': raw_data[i].data,\n              'x': raw_data.find(dd=>dd.denominazione_regione===raw_data[i].denominazione_regione).x,\n              'y': raw_data.find(dd=>dd.denominazione_regione===raw_data[i].denominazione_regione).y\n            }\n            data.push(obj);\n          }\n        })\n      }\n      this.setState({raw_data:raw_data, data:data}, ()=>{\n\n        const svg = d3.select(this._rootNode);\n        const g = svg.append('g');\n          \n        svg.call(d3.zoom()\n          .extent([[0, 0], [window.innerWidth, window.innerHeight]])\n          .scaleExtent([1, 20])\n          .on(\"zoom\", zoomed));\n\n        function zoomed() {\n          g.attr(\"transform\", d3.event.transform);\n        }\n\n        let nodes = g.selectAll('text').data(this.state.data).enter().append('text')\n          .attr('font-size','1px')\n          .text(d=>emoji_dictionary[d.category]);\n\n        \n\n        simulation.nodes(data)\n          .on('tick', ()=>{\n            // console.log(simulation.alpha());\n            document.title = simulation.alpha().toFixed(4);\n            // nodes\n            //   .attr('x',d=>d.x)\n            //   .attr('y',d=>d.y);\n          })\n          .force(\"x\", d3.forceX(d=>d.x))\n          .force(\"y\", d3.forceY(d=>d.y))\n          .force(\"collision\", d3.forceCollide(0.35))\n          .alphaDecay(0.005)\n          .alpha(1)\n          .on(\"end\", () => {\n            nodes\n              .attr('x',d=>d.x)\n              .attr('y',d=>d.y);\n            console.log('ended',data);\n\n            if (window.confirm(\"🌺🌿☘️🌼🌸 download spatialized data?\")) {\n              var blob = new Blob([JSON.stringify(data)], {type: \"application/json;charset=utf-8\"});\n              FileSaver.saveAs(blob, \"data covi-z.json\");\n            }\n\n          })\n          .restart();\n\n        // spatialization()\n        // function spatialization() {\n        //   if (simulation.alpha() > 0.1) {\n        //     requestAnimationFrame(spatialization())\n        //   }\n        // }\n      })\n    })\n  }\n  render() {\n    console.log(this.state.data);\n    return <svg ref={this._setRef.bind(this)} style={{ width:'100%', height:'100%'}}></svg>;\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport './App.css';\n\nimport Test from './Test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}